'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.getPackages = getPackages;

var _typescript = require('typescript');

var _typescript2 = _interopRequireDefault(_typescript);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getPackages(fileName, source) {
  var sourceFile = _typescript2.default.createSourceFile(fileName, source, _typescript2.default.ScriptTarget.ES2016, true);
  var packages = gatherPackages(sourceFile).map(function (pkg) {
    return (0, _extends3.default)({}, pkg, { fileName: fileName });
  });
  return packages;
}

function gatherPackages(sourceFile) {
  var packages = [];
  gatherPackagesFromNode(sourceFile);

  function gatherPackagesFromNode(node) {
    if (node.kind === _typescript2.default.SyntaxKind.ImportDeclaration) {
      var importNode = node;
      var packageInfo = {
        name: importNode.moduleSpecifier.text,
        line: sourceFile.getLineAndCharacterOfPosition(importNode.getStart()).line + 1,
        string: importNode.getText() + '\nconsole.log(' + importNode.importClause.getText().replace('* as ', '') + ');'
      };
      packages.push(packageInfo);
    } else if (node.kind === _typescript2.default.SyntaxKind.CallExpression) {
      var callExpressionNode = node;
      if (callExpressionNode.expression.text === 'require') {
        var packageName = callExpressionNode.arguments[0].text;
        var _packageInfo = {
          fileName: sourceFile.fileName,
          name: packageName,
          line: sourceFile.getLineAndCharacterOfPosition(callExpressionNode.getStart()).line + 1,
          string: callExpressionNode.getText()
        };
        packages.push(_packageInfo);
      }
    }
    _typescript2.default.forEachChild(node, gatherPackagesFromNode);
  }
  return packages;
}