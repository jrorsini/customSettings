'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var webpack = require('webpack');
var MemoryFS = require('memory-fs');
var BabiliPlugin = require('babili-webpack-plugin');
var pkgDir = require('pkg-dir');
var tmp = require('tmp');
var fs = require('fs');
var path = require('path');

var _require = require('zlib'),
    gzipSync = _require.gzipSync;

var _require2 = require('./utils'),
    getPackageJson = _require2.getPackageJson;

function getEntryPoint(packageInfo) {
  var tmpFile = tmp.fileSync();
  fs.writeFileSync(tmpFile.name, packageInfo.string, 'utf-8');
  return tmpFile;
}

function calcSize(packageInfo, callback) {
  var entryPoint = getEntryPoint(packageInfo);
  var packageRootDir = pkgDir.sync(path.dirname(packageInfo.fileName));
  var modulesDirectory = path.join(packageRootDir, 'node_modules');
  var peers = getPackageJson(packageInfo).peerDependencies || {};
  var defaultExternals = ['react', 'react-dom', 'lodash'];
  var externals = (0, _keys2.default)(peers).concat(defaultExternals).filter(function (p) {
    return p !== packageInfo.name;
  });

  var compiler = webpack({
    entry: entryPoint.name,
    plugins: [new webpack.DefinePlugin({
      'process.env.NODE_ENV': (0, _stringify2.default)('production')
    }), new webpack.optimize.ModuleConcatenationPlugin(), new webpack.IgnorePlugin(/^electron$/), new BabiliPlugin()],
    resolve: {
      modules: [modulesDirectory, 'node_modules']
    },
    module: {
      rules: [{
        test: /\.s?css$/,
        use: 'css-loader'
      }, {
        test: /\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot|wav)(\?.*)?$/,
        loader: 'url-loader',
        options: {
          name: '[path][name].[ext]?[hash]',
          limit: 10000
        }
      }]
    },
    node: {
      fs: 'empty',
      net: 'empty',
      tls: 'empty',
      module: 'empty',
      child_process: 'empty', //eslint-disable-line
      dns: 'empty'
    },
    externals: externals,
    output: {
      filename: 'bundle.js'
    }
  });

  var memoryFileSystem = new MemoryFS();
  compiler.outputFileSystem = memoryFileSystem;

  compiler.run(function (err, stats) {
    entryPoint.removeCallback();
    if (err || stats.toJson().errors.length > 0) {
      callback({ err: err || stats.toJson().errors });
    } else {
      var size = stats.toJson().assets.filter(function (x) {
        return x.name === 'bundle.js';
      }).pop().size;
      var bundle = path.join(process.cwd(), 'bundle.js');
      var gzip = gzipSync(memoryFileSystem.readFileSync(bundle), {}).length;
      callback({ size: size, gzip: gzip });
    }
  });
}

module.exports = { calcSize: calcSize };