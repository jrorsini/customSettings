'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSize = exports.cacheFileName = undefined;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var getSize = exports.getSize = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(pkg) {
    var key;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            readSizeCache();
            _context.prev = 1;

            versionsCache[pkg.string] = versionsCache[pkg.string] || (0, _utils.getPackageVersion)(pkg);
            _context.next = 8;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context['catch'](1);
            return _context.abrupt('return', (0, _extends4.default)({}, pkg, failedSize));

          case 8:
            key = pkg.string + '#' + versionsCache[pkg.string];

            if (!(sizeCache[key] === undefined || sizeCache[key] instanceof _promise2.default)) {
              _context.next = 27;
              break;
            }

            _context.prev = 10;

            sizeCache[key] = sizeCache[key] || calcPackageSize(pkg);
            _context.next = 14;
            return sizeCache[key];

          case 14:
            sizeCache[key] = _context.sent;

            saveSizeCache();
            _context.next = 27;
            break;

          case 18:
            _context.prev = 18;
            _context.t1 = _context['catch'](10);

            if (!(_context.t1 === _debouncePromise.DebounceError)) {
              _context.next = 25;
              break;
            }

            delete sizeCache[key];
            throw _context.t1;

          case 25:
            sizeCache[key] = failedSize;
            return _context.abrupt('return', (0, _extends4.default)({}, pkg, sizeCache[key], { error: _context.t1 }));

          case 27:
            return _context.abrupt('return', (0, _extends4.default)({}, pkg, sizeCache[key]));

          case 28:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[1, 5], [10, 18]]);
  }));

  return function getSize(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.clearSizeCache = clearSizeCache;
exports.cleanup = cleanup;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _workerFarm = require('worker-farm');

var _workerFarm2 = _interopRequireDefault(_workerFarm);

var _pkgDir = require('pkg-dir');

var _pkgDir2 = _interopRequireDefault(_pkgDir);

var _debouncePromise = require('./debouncePromise');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var workers = (0, _workerFarm2.default)(require.resolve('./webpack'), ['calcSize']);
var extensionVersion = (0, _utils.parseJson)(_pkgDir2.default.sync(__dirname)).version;
var cacheFileName = exports.cacheFileName = _path2.default.join(__dirname, 'ic-cache-' + extensionVersion);
var sizeCache = {};
var versionsCache = {};
var failedSize = { size: 0, gzip: 0 };

function calcPackageSize(packageInfo) {
  return (0, _debouncePromise.debouncePromise)(packageInfo.fileName + '#' + packageInfo.line, function (resolve, reject) {
    var debug = process.env.NODE_ENV === 'test';
    var calcSize = debug ? require('./webpack').calcSize : workers.calcSize;
    calcSize(packageInfo, function (result) {
      return result.err ? reject(result.err) : resolve(result);
    });
  });
}

function clearSizeCache() {
  sizeCache = {};
  if (_fs2.default.existsSync(cacheFileName)) {
    _fs2.default.unlinkSync(cacheFileName);
  }
}

function readSizeCache() {
  try {
    if ((0, _keys2.default)(sizeCache).length === 0 && _fs2.default.existsSync(cacheFileName)) {
      sizeCache = JSON.parse(_fs2.default.readFileSync(cacheFileName, 'utf-8'));
    }
  } catch (e) {
    // silent error
  }
}

function saveSizeCache() {
  try {
    var keys = (0, _keys2.default)(sizeCache).filter(function (key) {
      var size = sizeCache[key] && sizeCache[key].size;
      return typeof size === 'number' && size > 0;
    });
    var cache = keys.reduce(function (obj, key) {
      return (0, _extends4.default)({}, obj, (0, _defineProperty3.default)({}, key, sizeCache[key]));
    }, {});
    if ((0, _keys2.default)(cache).length > 0) {
      _fs2.default.writeFileSync(cacheFileName, (0, _stringify2.default)(cache, null, 2), 'utf-8');
    }
  } catch (e) {
    // silent error
  }
}

function cleanup() {
  _workerFarm2.default.end(workers);
}